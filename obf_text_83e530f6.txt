--[[
          ...                               .---:                                                                                             
         .%%%-                             *%%%#*                                                 :===                                        
         .%%%-    .::.  ... ...      ... .=%%%:.. ...     ..     .:.        .:..       .:.  ...  .=%%#..     ..:.      ...  .:                
         .%%%-  =#%%%%%*%%% -%%#    -%%#.*%%%%%%*.%%%.   *%%+ .*%%%%%+   -*%%%%%#=  :*%%%%%*%%%-.%%%%%%%: .+#%%%%%*-  :%%%:#%%:               
         .%%%- *%%#-::=#%%%  =%%*  .#%%: .=%%#....%%%.   *%%+ =%%#      *%%*-::=*=.:%%%=::-*%%%- .=%%#.. :%%%=::-#%%+ :%%%#+--                
         .%%%-.%%%:    :%%%   *%%= *%%-   -%%#   .%%%.   *%%+  +#%%#*- .%%%.       +%%+     #%%-  -%%#   *%%=    .%%%.:%%%:                   
    :=: .=%%%. #%%+   .*%%%    #%%*%%=    -%%#   .%%%-  .#%%+      *%%+ #%%=   :-. =%%#:   -%%%-  -%%#   =%%#.   +%%# :%%%                    
   -%%%%%%%%-  .*%%%##%%%%%    .#%%%+     -%%#    +%%%##%#%%+ =%%#*#%%- .*%%%#%%%*. =%%%##%%%%%-  .#%%%#: =#%%%#%%%+. :%%%                    
     :====:      .-===:.---     =%%*      .---     .-==-.:--:  .-===-      -===-.     :===- ---.    -==-    :-===:    .---                    
                               :%%#.                                                                                                          
                               ===.                                                                                                           
--]]

-- Jayfuscator V1.2.1 --

do return(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,ba,bb,bc)local bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq=121,78,18,77,85,72,90,43,45,14,26,85,16,74,74,92,82,75,53,62,18,24,19,54,29,98,46,63,34,99,10,46,47,40,28,25,67,45,24,45,66,72,81,40,57,15,97,20,30,58,30,28,37 while bc~=77 do if bd<=733 then if bd>=427 then if bd>=600 then if bd>=678 then if bd>=696 then if bd>704 then bd=770 ch={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,},{1,0,c,2,5,4,7,6,9,8,11,10,13,12,15,14,},{2,d,0,1,6,7,4,5,10,11,8,9,14,15,12,13,},{3,2,1,0,7,w,5,4,ba,10,9,8,15,14,13,12,},{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11,},{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10,},{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9,},{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,},{8,9,10,11,12,13,14,p,0,1,2,3,4,5,6,7,},{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6,},{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,},{11,10,9,8,15,14,13,12,3,2,j,0,7,6,5,4,},{12,13,14,15,8,9,10,11,v,5,q,7,0,1,2,3,},{13,12,15,14,9,8,11,10,z,4,7,6,1,0,3,2,},{14,15,12,13,10,11,8,9,6,7,4,5,2,3,0,1,},{15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,},nil,nil,nil}else do ck=cafunction(c,d,d,d)do return co[cb(c,16)]end end)end bd=733 end else for c=0,255 do do co[c]=cl(c);end end bd=696 end else if bd>=630 then if bd<658 then bd=663 do cb=tonumber end else do co={}end bd=678 end else bd=630 bm=(unpack or table.unpack)end end else if bd>=479 then if bd>=527 then if bd>533 then bt=math.floor bd=600 else bv=math.abs bd=575 end else bd=527 bi=(function(c,d)if'number'==bu(c)then return true else return false end end)end else if bd>433 then bu=type bd=479 else bd=444 do be=select end end end end else if bd<=195 then if bd>=147 then if bd<=147 then bd=167 do cl=string.char end else if bd<188 then do bj=string.sub end bd=195 else ca=string.gsub bd=238 end end else if bd>85 then bs=string.byte bd=147 else bd=125 be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq=nil end end else if bd<=312 then if bd<=238 then do bw=string.rep end bd=264 else if bd<303 then bz=table.concat bd=312 else bd=337 by=table.insert end end else if bd>=366 then if bd<388 then bn=(getfenv or function()return _ENV end)bd=391 else bd=427 br=setmetatable end else do cq=math.ldexp end bd=366 end end end end else if bd>=1123 then if bd<=1236 then if bd<=1154 then if bd>1126 then bd=1186 bg=function()local c,d,j,p,q,v,w,z=80,40,30,90,94,32,89,60,65,68,53,86,69,80,40,31,50,97,59 while c~=35 do if d>=196 then if d>=288 then if d<=288 then if 0==p then if not(w==0)then p=1 do v=0 end else return(z*0)end elseif not(p==2047)then else if 0==w then do do return(z*(0/0))end end else return(z*(1/0))end end d=334 else if d<351 then d=358 return(z*(2^(p-1023))*(w/cd+v))else c=35;end end else if d>=231 then if d>234 then d=288 v=e else d=269 do w=(bx(0,j,20)*4294967296+q)end end else do p=bx(20,j,a)end d=231 end end else if d>=119 then if d<=119 then d=148 j=bf()else if d>150 then d=196 z=((-1)^bx(31,j,1))else d=167 if((q==0 and j==0))then return 0 end end end else if d<69 then d=72 j,p,q,v,w,z=nil else d=119 q=bf()end end end end end else cm=function()local a,c c,a=bs(ck,bl,(bl+2))bl=(bl+2);return((a*256)+c);end bd=1154 end else if bd<=1186 then bd=1202 cj=function(a,a,a,a,a)local a,c,d,e=40,54,54,61,52,62,12,93,29,64,60,35,82 while a~=29 do if c<=104 then if c>=74 then if c<97 then e=bf()c=104 else c=150 d=ck:sub(bl,(bl+e-1))end else d,e=nil c=74 end else if c<=150 then do bl=(bl+e);end c=184 else if c>187 then a=29;else c=209 return d;end end end end end else if bd<1231 then ci=function(...)return{...},be('#',...)end bd=1236 else do bp={}end bd=1252 end end end else if bd<=1302 then if bd<=1252 then bd=1285 ce=function(a,c)local c,d,e,j,p,q,v,w=88,79,35,36,37,61,17,74,80,28,35,53,55,63,24,95,86,29,22,17,45,66,59,84,47,88 while c~=48 do if d<=310 then if d>=207 then if d<=243 then if d<234 then v=bf()d=243 else d=269 for c=(#bp+1),(#bp+v)do local z,ba,bi,bj,br=89,63,35,84,39,70,74,74,48,53,31,89,89,76,98,74,14,29,42,14,63,29,51,55 while z~=45 do if ba<=271 then if ba>=180 then if ba<=203 then if ba>185 then ba=227 bj[61]=bk();else ba=203 bi=bf()end else if ba>231 then ba=319 do bj[180]=cp(bi,1,11);end else ba=271 bj[21]=cp(br,1,x);end end else if ba<=81 then if ba<78 then bi,bj,br=nil ba=81 else bj={}ba=114 end else if ba<133 then ba=135 do bj[155]=bk();end else ba=180 br=bf()end end end else if ba>=424 then if ba<=467 then if ba>427 then bj[71]=-bj[22]ba=494 else bj[8]=-bj[72]ba=467 end else if ba>497 then z=45;else ba=523 do bp[c]=bj;end end end else if ba>=377 then if ba<400 then ba=409 bj[22]=cp(br,21,29);else bj[66]=cp(bi,12,33);ba=424 end else if ba>323 then bj[134]=cp(br,12,20);ba=377 else bj[72]=cp(br,3,11);ba=346 end end end end end end end else if d>273 then p={}d=343 else d=310 do e=bf()end end end else if d>=142 then if d<180 then d=182 q={}else j={}d=207 end else if d<107 then d=111 e,j,p,q,v,w=nil else w={}d=142 end end end else if d<=454 then if d<=370 then if d<365 then do for c=1,e do local e,v,x,z=74,57,20,98,37,11,51,44,59,83,28,29 while e~=40 do if v>=151 then if v>=170 then if v>178 then e=40;else v=208 p[c]=x;end else if(not(z~=3))then x=(not(bk()==0));elseif(not(z~=1))then x=bg();elseif(0==z)then x=cj();elseif(2==z)then x=a[cj()];end;v=170 end else if v<=57 then x,z=nil v=87 else if v<120 then v=128 z=bk()else x=nil v=151 end end end end end end d=370 else d=414 j[93]=p end else if d<452 then for a=1,bf()do q[a-1]=ce();end d=454 else j[23]=q;d=475 end end else if d<=515 then if d>480 then d=563 for a=o,bf()do local c,e,o,p,q,v=79,77,53,60,82,87,75,72,66,56,14,52,70,16,47,60,14,94,94,15,27,99,49,70,44 while c~=41 do if e>=378 then if e<=474 then if e>=437 then if e>440 then e=496 p[22]=cp(o,21,29);else e=474 p[66]=cp(v,12,33);end else if e<412 then e=414 do p[180]=cp(v,1,11);end else e=437 p[72]=cp(o,3,11);end end else if e>=560 then if e>=590 then if e<611 then e=619 w[a]=p;else break end else p[71]=-p[g]e=590 end else if e>500 then e=560 p[8]=-p[72]else e=519 p[61]=cp(o,12,20);end end end else if e<=213 then if e>=169 then if e>176 then e=231 do p[99]={};end else p[155]=bk();e=213 end else if e<118 then o,p,q,v=nil e=124 else do p={{},nil,nil,nil,nil}end e=169 end end else if e>=307 then if e>=326 then if e<351 then e=356 q=cp(o,1,2)else e=378 p[21]=q end else do v=bf()end e=326 end else if e<260 then if 1==bk()then for a=1,bk()do p[bb][a]={bk()==0,bf()}end end e=263 else e=307 o=bf()end end end end end end else d=515 j[181]=bk();end else if d<=563 then j[172]=w;d=600 else if d>605 then break else d=622 return j;end end end end end end end else if bd<1298 then do bq={}end bd=1302 else bo={}bd=1331 end end else if bd<=1331 then bd=1369 bh=function(a,c,d,e)local e,g,j,o,p e=a[172]j=a[181]g=bq p=a[93]o=a[23]do return function(...)local a,g,q,v,w,x,z,ba,bb do g=1 end do a=-1 end w=-1 v={}do x={...}end do bb=(be('#',...)-1)end z={}do ba={}end for w=0,bb do if(not(w<j))then do v[(w-j)]=x[(w+1)];end else ba[w]=x[(w+1)];end;end;q=(bb-j+1)while true do local q,w,be,bg,bi,bj,bo,br,bt,bu bu=e[g]bg=bu[180]bo=bu[155]be=bu[72]do bj=bu[134]end bt=bu[22]br=bu[61]do w=bu[8]end bi=bu[66]q=bu[71]if not(bg<46)then do if not(bg<69)then if not(bg>80)then if not(bg<75)then do if not(bg>77)then if not(bg>75)then local bo do bo={}end if(#z>0)then for bv=1,#z do local bw do bw=z[bv]end do for bv=0,#bw do local by,bz,ca bz=bw[bv]ca=bz[1]by=bz[2]if(ca==ba and by>=0)then do bo[by]=ca[by]end bz[1]=bo end end end end end return bu[bu[134]],bu[bt];else if not(bg~=76)then ba[be]=ba[bi]else ba[be]=ba[bi][ba[bt]];end end else if not(bg<79)then if 79==bg then if be then bu[72]=false;bt=bi;g=(g-1);else g=(g+bi+bt);end else do return ba[be]end end else do d=ba[bu[be]]end end end end else if not(bg>t)then if not(bg<70)then do if(bu[180]>70)then else local t,bo bo,t=ci(...)do for t=y,be do ba[(t-1)]=bo[t]end end end end else do ba[be]=(ba[bi]%p[bt]);end end else if not(bu[180]>72)then ba[be]=(ba[bi]+p[bt]);else do if(bg<74)then e[g]=bp[bu[61]];g=bi;else ba[q]=(function()ba[be]=bh(o[bj],nil,d);end)end end end end end else if not(bg<87)then if not(bg>89)then do if not(bg<88)then if 88==bg then ba[be]=bq[bj]else ba[be][p[bi]]=p[bu[22]];end else ba[q]=(function()ba[be]=bh(o[bj],nil,d);end)end end else if not(bg<91)then if(bg<92)then do return ba[be]();end;else g=bi;end else bq[be]=ba[bj]end end else do if not(bg<84)then if not(bu[180]>84)then ba[be]=(ba[bi]+ba[bu[n]]);else do if(bg>85)then local n,t,y y=be n=ba[(y+2)]t=(ba[y]+n)ba[y]=t;do if((n>0))then if(not(t>ba[y+1]))then g=bi;ba[(y+3)]=t;end elseif(not(t<ba[y+1]))then do g=bi;end do ba[(y+3)]=t;end end end else bq[bu[72]]()end end end else if not(bg>81)then if not ba[bt]then ba[be]=ba[bt];g=bi;end;else if(bg<83)then d[p[bi]]=ba[bu[72]];else p=bq[be](p)end end end end end end else if not(bu[180]<57)then if not(bg>62)then if not(bu[180]<60)then if not(bu[180]<61)then do if(bg<62)then do ba[bu[72]]=(ba[bu[66]]^ba[bt]);end else local n n=bu[72]ba[n]=ba[n](ba[n+1]);end end else ba[be]={};end else if not(bg<58)then if(bg<59)then local n,t,y,bo bo=be n,y=ci(ba[bo](bm(ba,(bo+1),bi)))a=(y+bo-1)do t=0 end do for y=bo,a do do t=(t+1);end ba[y]=n[t];end;end else g=((p[be]<ba[bt])and bi or g)end else ba[be]=bh(o[bi],nil,d);end end else if not(bg>65)then if not(bg<64)then if(bg>64)then local n n=be do ba[n]=ba[n](bm(ba,n+1,bi));end else local n,o n=be o={}if(#z>0)then for t=1,#z do local y y=z[t]for t=0,#y do local bo,bv,bw bo=y[t]bv=bo[1]bw=bo[2]do if(bv==ba and bw>=0)then o[bw]=bv[bw]bo[1]=o end end end end end return bm(ba,n,a);end else local n n=be ba[n](bm(ba,(n+1),bi))end else if not(bu[180]<67)then if(bg<68)then local n,o o=be n=ba[bi]ba[(o+1)]=n;ba[o]=n[ba[bt]];else ba[bu[72]]=(ba[bi]*ba[bt]);end else local n,o o=be n=ba[bi]do ba[(o+1)]=n;end ba[o]=n[p[bt]];end end end else do if not(bg<51)then if not(bg<54)then if not(bu[k]<55)then if(bg<56)then if((p[be]<ba[bt]))then g=bi;end;else local k,n,o,t,y t=bu[72]n=bt y=(t+2)do o={ba[t](ba[t+1],ba[y])}end for bo=1,n do ba[(y+bo)]=o[bo]end k=ba[(t+3)]do if k then ba[y]=k else g=bu[66];end;end end else ba[be]=p[bi]end else if not(bu[180]>51)then ba[be]=(not(bi==0));do g=(g+1);end else if not(bg~=52)then ba[be]=-ba[bi];else ba[be]=(ba[bi]-ba[bt]);end end end else if not(bg>47)then do if not(bu[180]~=46)then do bq[be]=bq[bj]end else ba={};for k=0,bb do if(k<j)then ba[k]=x[(k+1)];else break end;end;end end else if not(bg<49)then if(bg>49)then if(not(ba[be]==ba[bt]))then g=bi;end;else ba[be]=(ba[bi]%ba[bt]);end else ba[bu[72]]=d[p[bi]];end end end end end end end else if not(bg<23)then if not(bg<34)then if not(bg<40)then if not(bg>42)then if not(bg>40)then e[g]=bp[br];g=bi;else if(bg>41)then do ba[be]=ba[bi][p[bt]];end else ba[be][ba[bi]]=ba[bt];end end else if not(bg<44)then if 44==bg then elseif ba[be]then g=bi;end else g=((ba[be]<ba[bu[22]])and bi or g)end end else if not(bg>36)then if not(bu[180]>34)then bq=ba else if 35==bg then ba[bu[72]]=#ba[bi];else local j,k k=be j={}for n=1,#z do local o o=z[n]for n=0,#o do local t,x,y y=o[n]t=y[1]x=y[r]if(t==ba and x>=k)then j[x]=t[x];do y[1]=j;end end;end;end;end end else do if not(bg>37)then ba[be]=nil;else if(bg<39)then local j,k,n k=be j={ba[k](bm(ba,k+1,bu[66]))}n=0 for o=k,bt do n=(n+1);ba[o]=j[n];end else ba[be]=d[p[bi]][p[bt]];end end end end end else if not(bu[180]>27)then if not(bu[180]<b)then if not(bg>25)then do do return ba[w][br]end end else if not(bg~=l)then local b,d,j,k j=be d=((bt-1)*50)b=ba[j]k=bi do for l=1,k do do b[(d+l)]=ba[(j+l)]end end;end else do ba[be]=c[bi];end end end else do if(bg>23)then local b b=ba[w][br]ba[w][br]=(b..ba[bt]);else ba[be]=ba[bi];end end end else if not(bg<31)then if not(bg>31)then do e[g]={[180]=bg-3,[72]=1,[22]=1,[66]=1,[61]=0};end g=(g-1);else do if 32==bg then local b b=be do return ba[b](bm(ba,(b+1),bi))end;else do while not ba[be]do g=bi;break end end end end end else if not(bg>28)then ba[be]();else if not(bg~=29)then local b b=be do return bm(ba,b,(b+bi))end;else local b,d,j b=bu[72]do d=ba[b]end j=ba[(b+2)]if((j>0))then if((d>ba[b+u]))then do g=bi;end else ba[(b+s)]=d;end elseif((d<ba[b+1]))then do g=bi;end else ba[(b+3)]=d;end end end end end end else if not(bg>10)then if not(bu[180]<5)then do if not(bg<8)then do if not(bg<9)then if 9==bg then local b b=be ba[b]=ba[b](bm(ba,b+1,a));else ba[be]=(ba[bi]/ba[bt]);end else c[bi]=ba[be];end end else do if not(bg<6)then if(bu[180]<7)then if(not(ba[be]<ba[bu[22]]))then g=bi;end;else ba[bu[h]]=(not ba[bu[66]]);end else ba[q]();end end end end else if not(bg<2)then if not(bu[180]>2)then local b,c c=bi do b=ba[c]end do for d=(c+1),bu[22]do b=(b..ba[d]);end;end ba[be]=b;else if(bg<f)then else ba[be]=(ba[bi]/p[bt]);end end else if(bg>0)then for b=be,bi do ba[b]=nil;end;else ba[be]=bq[bj]end end end else do if not(bg<17)then do if not(bg<m)then if not(bg<21)then if i==bg then do g=((ba[be]~=ba[bt])and bu[66]or g)end else while(ba[be]~=p[bt])do g=bi;break end end else do ba[be]=(ba[bi]*p[bt]);end end else if not(bg<18)then if not(bg~=18)then e[g]={[72]=2,[61]=0,[180]=bg- -40,[22]=0,[66]=4};g=(g-1);else do bq[be]={}end end else ba[bu[be]]=ba end end end else if not(bg>13)then do if not(bg<12)then if(bg>12)then if((ba[be]<ba[bt]))then g=bi;end;else g=((p[be]~=p[bt])and bu[66]or g)end else local b,c,d c=be d=ba[c]b=bi do for e=1,b do do d[e]=ba[(c+e)]end end;end end end else if not(bg<15)then if(bg<16)then a=bu[be];else local a,b a=bu[72]b=bi for c=a,b do ba[c]=v[(c-a)];end;end else if((ba[be]>ba[bt]))then g=bi;end;end end end end end end end do g=(g+1);end end;end;end end else if bd<1391 then bd=1395 do return bh(ce(bn()),{},bn())();end else bc=77;end end end end else if bd<=903 then if bd<=800 then if bd<794 then bd=800 cn=''else cd=(2^52)bd=831 end else if bd>=866 then if bd<898 then do cf=2 end bd=903 else bd=946 for a=1,31 do cg[a]=cf cf=(cf*2)end end else bd=866 do cg={[0]=1}end end end else if bd>=1060 then if bd<=1060 then bl=1 bd=1076 else if bd<1092 then bd=1101 bf=function()local a,b,c,d a,d,c,b=bs(ck,bl,(bl+3))bl=(bl+4);return((b*16777216)+(c*65536)+(d*256)+a);end else do bk=function()local a a=bs(ck,bl,bl)bl=(bl+1);return a;end end bd=1123 end end else if bd>=985 then if bd<1019 then bd=1025 cc=(bit_lib and bit_lib.bxor or function(a,b)a=a%(2^32)b=b%(2^32)local c,d=0,1 while a>0 and b>0 do local e,f=a%16,b%16 c=c+ch[e+1][f+1]*d a=(a-e)/16 b=(b-f)/16 d=d*16 end c=c+a*d+b*d return c end)else bd=1060 cp=function(a,b,c,d,d,d)local d d=((a/2^(b-1))%2^((c-1)-(b-1)+1))return(d-d%1);end end else bd=985 do bx=function(a,b,c,d,d)local d,e,f=78,61,32,69,62,48,37,77,35,41,81,33,49 while d~=44 do if e>=122 then if e>=162 then if e>168 then break else e=183 return f end else f=(f-f%1)e=162 end else if e<=61 then f=nil e=89 else if e<101 then e=107 f=nil else e=122 f=((b/cg[a])%cg[c])end end end end end end end end end end end end end)(11,25,3,3,1,4,22,72,21,1,180,26,20,22,1,15,6,2,3,71,1,4,6,2,1,5,11,99)end